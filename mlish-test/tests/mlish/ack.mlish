#lang mlish
(require rackunit/turnstile)

;; tests cond with else

(define (ack/else [m : Int] [n : Int] -> Int)
  (cond 
   [(zero? m) (add1 n)]
   [(zero? n) (ack/else (sub1 m) 1)]
   [else 
    (ack/else (sub1 m) (ack/else m (sub1 n)))]))

(check-type (ack/else 0 0) : Int -> 1)
(check-type (ack/else 1 1) : Int -> 3)
(check-type (ack/else 2 2) : Int -> 7)
(check-type (ack/else 3 4) : Int -> 125)

(define (ack [m : Int] [n : Int] -> Int)
  (cond 
   [(zero? m) (add1 n)]
   [(zero? n) (ack (sub1 m) 1)]
   [#t (ack (sub1 m) (ack m (sub1 n)))]))

(check-type (ack 0 0) : Int -> 1)
(check-type (ack 1 1) : Int -> 3)
(check-type (ack 2 2) : Int -> 7)
(check-type (ack 3 4) : Int -> 125)
