#lang mlish
(require rackunit/turnstile)

;; the following function def produces error:
;; define: Function should-err's body (let ((y (f x))) x) has type X, which
;; does not match given type Y.
;; TODO: add check-_ rackunit form for functions
#;(define (should-err [x : X] [f : (→ X Y)] -> Y)
  (let ([y (f x)])
      x))

(define (try [x : X][f : (→ X Y)] → X)
  (let ([y (f x)]) x))

(check-type try : (→/test X (→ X Y) X))

(define (accept-A×A [pair : (× A A)] → (× A A))
  pair)

(typecheck-fail (accept-A×A (tup 8 "ate"))
 #:with-msg "couldn't unify Int and String\n *expected: \\(× A A\\)\n *given: \\(× Int String\\)")

(typecheck-fail (ann (accept-A×A (tup 8 "ate")) : (× String String))
 #:with-msg "expected: \\(× String String\\)\n *given: \\(× Int String\\)")

