#lang mlish
(require "basics-general.mlish"
	 rackunit/turnstile)
(require-typed append filter foldr foldl reverse snd member 
               #:from "basics-general.mlish")


;; =============================================================================
;; http://www.cs.cornell.edu/courses/cs3110/2011fa/hw/ps1/ps1.html
;; continued

;; -----------------------------------------------------------------------------

(define (map-index [is* : (List (** Int (List String)))] → (List (** String Int)))
  (match is* with
   [Nil -> Nil]
   [Cons hd tl ->
    (match hd with
     [Pair i s* ->
      (append (foldr (λ ([s : String] [acc : (List (** String Int))]) (Cons (Pair s i) acc))
                     s*
                     Nil)
              (map-index tl))])]))

(check-type
  (map-index Nil)
  : (List (** String Int))
  ⇒ Nil)

(check-type
  (map-index (Cons (Pair 0 (Cons "a" (Cons "b" (Cons "c" Nil)))) Nil))
  : (List (** String Int))
  ⇒ (Cons (Pair "a" 0) (Cons (Pair "b" 0) (Cons (Pair "c" 0) Nil))))

(check-type
  (map-index (Cons (Pair 0 (Cons "a" (Cons "b" (Cons "c" Nil))))
             (Cons (Pair 1 (Cons "d" (Cons "e" Nil)))
             Nil)))
  : (List (** String Int))
  ⇒ (Cons (Pair "a" 0) (Cons (Pair "b" 0) (Cons (Pair "c" 0) (Cons (Pair "d" 1) (Cons (Pair "e" 1) Nil))))))

(define (reduce-index [si* : (List (** String Int))] → (List (** String (List Int))))
  (snd (foldr
    (λ ([si : (** String Int)] [acc : (** (List String) (List (** String (List Int))))])
      (match si with
       [Pair s i ->
        (match acc with
         [Pair seen out ->
          (match (member seen s) with
           [True ->
            (Pair
              seen
              (foldr
                (λ ([si* : (** String (List Int))] [acc : (List (** String (List Int)))])
                  (match si* with
                   [Pair s2 i* ->
                    (if (equal? s s2)
                      (match (member i* i) with
                       [True -> (Cons si* acc)]
                       [False -> (Cons (Pair s2 (Cons i i*)) acc)])
                      (Cons si* acc))]))
                out
                Nil))]
           [False ->
            (Pair
              (Cons s seen)
              (Cons (Pair s (Cons i Nil)) out))])])]))
    si*
    (Pair Nil Nil))))


(check-type
  (reduce-index Nil)
  : (List (** String (List Int)))
  ⇒ Nil)

(check-type
  (reduce-index
    (map-index (Cons (Pair 0 (Cons "a" (Cons "b" (Cons "c" Nil))))
               (Cons (Pair 1 (Cons "d" (Cons "e" Nil)))
               Nil))))
  : (List (** String (List Int)))
  ⇒ (Cons (Pair "a" (Cons 0 Nil))
    (Cons (Pair "b" (Cons 0 Nil))
    (Cons (Pair "c" (Cons 0 Nil))
    (Cons (Pair "d" (Cons 1 Nil))
    (Cons (Pair "e" (Cons 1 Nil))
    Nil))))))

(check-type
  (reduce-index
    (map-index (Cons (Pair 0 (Cons "a" (Cons "b" (Cons "c" Nil))))
               (Cons (Pair 1 (Cons "a" (Cons "b" Nil)))
               Nil))))
  : (List (** String (List Int)))
  ⇒ (Cons (Pair "c" (Cons 0 Nil))
    (Cons (Pair "a" (Cons 0 (Cons 1 Nil)))
    (Cons (Pair "b" (Cons 0 (Cons 1 Nil)))
    Nil))))

;; For every string, get all integers that refer to the string
(define (make-index [is* : (List (** Int (List String)))] 
          → (List (** String (List Int))))
  (reduce-index (map-index is*)))

(check-type
  (make-index Nil)
  : (List (** String (List Int)))
  ⇒ Nil)

(check-type
  (make-index (Cons (Pair 1 (Cons "ocaml" (Cons "is" (Cons "fun" (Cons "because" (Cons "fun" (Cons "is" (Cons "a" (Cons "keyword" Nil)))))))))
              (Cons (Pair 2 (Cons "page" (Cons "2" (Cons "intentionally" (Cons "left" (Cons "blank" Nil))))))
              (Cons (Pair 3 (Cons "the" (Cons "quick" (Cons "brown" (Cons "fox" (Cons "jumped" (Cons "over" (Cons "the" (Cons "lazy" (Cons "dog" Nil))))))))))
              (Cons (Pair 4 (Cons "is" (Cons "this" (Cons "the" (Cons "end" Nil))))) Nil)))))
  : (List (** String (List Int)))
  ⇒ (Cons (Pair "ocaml" (Cons 1 Nil))
    (Cons (Pair "because" (Cons 1 Nil))
    (Cons (Pair "fun" (Cons 1 Nil))
    (Cons (Pair "a" (Cons 1 Nil))
    (Cons (Pair "keyword" (Cons 1 Nil))
    (Cons (Pair "page" (Cons 2 Nil))
    (Cons (Pair "2" (Cons 2 Nil))
    (Cons (Pair "intentionally" (Cons 2 Nil))
    (Cons (Pair "left" (Cons 2 Nil))
    (Cons (Pair "blank" (Cons 2 Nil))
    (Cons (Pair "quick" (Cons 3 Nil))
    (Cons (Pair "brown" (Cons 3 Nil))
    (Cons (Pair "fox" (Cons 3 Nil))
    (Cons (Pair "jumped" (Cons 3 Nil))
    (Cons (Pair "over" (Cons 3 Nil))
    (Cons (Pair "lazy" (Cons 3 Nil))
    (Cons (Pair "dog" (Cons 3 Nil))
    (Cons (Pair "is" (Cons 1 (Cons 4 Nil)))
    (Cons (Pair "this" (Cons 4 Nil))
    (Cons (Pair "the" (Cons 3 (Cons 4 Nil)))
    (Cons (Pair "end" (Cons 4 Nil)) Nil))))))))))))))))))))))

