#lang mlish
(require mlish/match2
         rackunit/turnstile)

(define-type (Option A)
  [None]
  [Some A])

;; -----------------------------------------------------------------------------

(define-type (List a)
  [Nil]
  [∷ a (List a)])

(define (foldl [f : (→ A B A)] [acc : A] [x* : (List B)] → A)
  (match x* with
   [Nil -> acc]
   [∷ h t -> (foldl f (f acc h) t)]))

(define (reverse [x* : (List A)] → (List A))
  (foldl (λ ([acc : (List A)] [x : A]) (∷ x acc)) Nil x*))

;; =============================================================================
;; === BatchedQueue

(define-type (BatchedQueue A)
  [BQ (List A) (List A)])

(define (bq-check [f : (List A)] [r : (List A)] → (BatchedQueue A))
  (match f with
   [Nil -> (BQ (reverse r) Nil)]
   [∷ h t -> (BQ f r)]))

(define (bq-empty → (BatchedQueue A))
  (BQ Nil Nil))

(define (bq-isEmpty [bq : (BatchedQueue A)] → Bool)
  (match bq with
   [BQ f r ->
    (match f with
     [Nil -> #t]
     [∷ h t -> #f])]))

(define (bq-snoc [bq : (BatchedQueue A)] [x : A] → (BatchedQueue A))
  (match bq with
   [BQ f r -> (bq-check f (∷ x r))]))

(define (bq-head [bq : (BatchedQueue A)] → (Option A))
  (match bq with
   [BQ f r ->
    (match f with
     [Nil -> None]
     [∷ h t -> (Some h)])]))

(define (bq-tail [bq : (BatchedQueue A)] → (Option (BatchedQueue A)))
  (match bq with
   [BQ f* r* ->
    (match f* with
     [Nil -> None]
     [∷ x f* ->
      (Some (bq-check f* r*))])]))

(define (list->bq [x* : (List A)] → (BatchedQueue A))
  (foldl
    (λ ([q : (BatchedQueue A)] [x : A]) (bq-snoc q x))
    (bq-empty) x*))

;; -----------------------------------------------------------------------------

(define digit*
  (∷ 1 (∷ 2 (∷ 3 (∷ 4 (∷ 5 (∷ 6 (∷ 7 (∷ 8 (∷ 9 Nil))))))))))

(check-type digit* : (List Int))

(define sample-bq
  (list->bq digit*))

(check-type sample-bq : (BatchedQueue Int))

(check-type (Some sample-bq) : (Option (BatchedQueue Int)))

(define (>> [f : (→ A (Option B))] [x : (Option A)] → (Option B))
  (match x with
   [None -> None]
   [Some y -> (f y)]))

(check-type >> : (→/test (→ X (Option Y)) (Option X) (Option Y)))

(check-type (bq-tail sample-bq) : (Option (BatchedQueue Int)))

;; can't pass polymorphic fn? need to inst first
(check-type (>> (inst bq-tail Int) (Some sample-bq)) 
  : (Option (BatchedQueue Int)))

;(ann (>> bq-tail (Some sample-bq)) : (Option (BatchedQueue Int)))

(define intbq-tail (inst bq-tail Int))

(check-type intbq-tail : 
            (→/test (BatchedQueue Int) (Option (BatchedQueue Int))))

(check-type (>> intbq-tail (Some sample-bq)) 
  : (Option (BatchedQueue Int)))

(check-type (inst bq-head Int) : (→/test (BatchedQueue Int) (Option Int)))

(define bq-tails-result
  (>> intbq-tail (>> intbq-tail (>> intbq-tail (Some sample-bq)))))

(check-type bq-tails-result : (Option (BatchedQueue Int))
  ⇒ (Some (BQ (∷ 4 (∷ 5 (∷ 6 (∷ 7 (∷ 8 (∷ 9 Nil)))))) Nil)))

(check-type (>> (inst bq-head Int) bq-tails-result) : (Option Int) -> (Some 4))

(require (only-in mlish [match orig:match]))
;; check match nested datatype bug
(check-type
    (orig:match bq-tails-result with
     [None -> None]
     [Some bq -> (bq-head bq)]) : (Option Int) -> (Some 4))
(check-type
    (match bq-tails-result with
     [None -> None]
     [Some bq -> (bq-head bq)]) : (Option Int) -> (Some 4))
