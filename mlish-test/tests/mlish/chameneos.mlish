#lang mlish
(require rackunit/turnstile)

(define-type Color Red Yellow Blue)

(define-type (Option X) None (Some X))

(define-type-alias Meet 
  (× (Channel (Option (× Color String)))
    (× Color String)))

(define-type-alias Result (× Int Int))

(define-type-alias MeetChan (Channel Meet))
(define-type-alias ResultChan (Channel Result))

(typecheck-fail (channel-put (make-channel {Bool}) 1)
 #:with-msg "couldn't unify Bool and Int.*expected: Bool.*given: Int")

(define (change [c1 : Color] [c2 : Color] -> Color)
  (match c1 with
   [Red ->
    (match c2 with
     [Blue -> Yellow]
     [Yellow -> Blue]
     [Red -> c1])]
   [Yellow ->
    (match c2 with
     [Blue -> Red]
     [Red -> Blue]
     [Yellow -> c1])]
   [Blue ->
    (match c2 with
     [Yellow -> Red]
     [Red -> Yellow]
     [Blue -> c1])]))

(check-type (change Red Blue) : Color -> Yellow)
(check-type (change Yellow Red) : Color -> Blue)
(check-type (change Blue Blue) : Color -> Blue)

(define NONE (None {(× Color String)}))

(define (get+put [ch-meet : MeetChan] -> Unit)
  (match (channel-get ch-meet) with
   [ch v -> 
    (begin (channel-put ch NONE) 
           (get+put ch-meet))]))

(define (swap [ch-meet : MeetChan] [n : Int] -> Unit)
  (if (zero? n)
      (get+put ch-meet)
      (match (channel-get ch-meet) with
       [ch1 v1 -> 
        (match (channel-get ch-meet) with
         [ch2 v2 ->
          (begin (channel-put ch1 (Some v2))
                 (channel-put ch2 (Some v1))
                 (swap ch-meet (sub1 n)))])])))
      

(define (place [ch-meet : MeetChan] [n : Int] -> Thread)
  (thread (λ () (swap ch-meet n))))

(define (rand-name -> String)
  (string (integer->char (random 256))))

(define (sleeper [ch-meet : MeetChan] [ch-res : ResultChan] 
                 [ch : (Channel (Option (× Color String)))]
                 [name : String] [c : Color] [met : Int] [same : Int] 
                 -> Unit)
  (begin
    (channel-put ch-meet (tup ch (tup c name)))
    (match (channel-get ch) with
     [Some c+s ->
      (match c+s with
       [other-col other-name -> 
        (begin
          (sleep 0)
          (sleeper 
           ch-meet ch-res ch
           name (change c other-col)
           (add1 met) (+ same (if (string=? name other-name) 1 0))))])]
     [None -> (channel-put ch-res (tup met same))])))

(define (creature [c : Color] [ch-meet : MeetChan] [ch-res : ResultChan] 
                  -> Thread)
  (thread
    (λ ()
      (let ([ch (make-channel {(Option (× Color String))})]
            [name (rand-name)])
        (sleeper ch-meet ch-res ch name c 0 0)))))

(define (map [f : (→ X Y)] [lst : (List X)] -> (List Y))
  (if (isnil lst)
      nil
      (cons (f (head lst)) (map f (tail lst)))))

(define (go [n : Int] [inits : (List Color)] -> (List Result))
  (let* ([ch-res (make-channel {Result})]
         [ch-meet (make-channel {Meet})]
         [start (place ch-meet n)]
         [ths (map (λ ([c : Color]) (creature c ch-meet ch-res)) inits)])
    (map (λ ([c : Color]) (channel-get ch-res)) inits)))

(define res1 (go 100 (list Blue Red Yellow)))

(define (check-total [r : (List Result)] [remaining : Int] -> Bool)
  (match2 r with
   [(tup met same) :: tl -> (check-total tl (- remaining met))]
   [nil -> (= remaining 0)]))

(check-type (length res1) : Int -> 3)

(check-type (check-total res1 200) : Bool -> #t)

(define res2 
  (map (λ ([x : Result]) (proj x 0))
       (go 1000 (list Blue Red Yellow Red Yellow Blue))))
(check-type res2 : (List Int))
(define (≤1000 [x : Int] -> Bool) (<= x 1000))
(define (andmap [p? : (→ X Bool)] [xs : (List X)] → Bool)
  (match2 xs with
   [nil -> #t]
   [x :: rst -> (and (p? x) (andmap p? rst))]))         
(check-type (andmap ≤1000 res2) : Bool -> #t)
(define (sum [l : (List Int)] -> Int)
  (match l with
   [hd :: tl -> (+ hd (sum tl))]
   [[] -> 0]))
(check-type (sum res2) : Int -> 2000)
  ;; -> (list (list 333 0)
  ;;          (list 333 0)
  ;;          (list 333 0)
  ;;          (list 333 0)
  ;;          (list 334 0)
  ;;          (list 334 0)))
