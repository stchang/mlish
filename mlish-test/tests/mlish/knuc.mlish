#lang mlish
(require rackunit/turnstile)

(require-typed mk-fasta #:from "fasta.mlish")

(define (all-counts [len : Int] [dna : String] -> (Hash String (Ref Int)))
  (let ([table (hash {String (Ref Int)})])
    (for ([s (in-range (- (string-length dna) len) -1 -1)])
      (let ([key (make-string len)])
        (string-copy! key 0 dna s (+ s len))
        (let* ([b (if (hash-has-key? table key)
                      (hash-ref table key)
                      (let ([b (ref 0)])
                        (hash-set! table key b)
                        b))])
          (:= b (add1 (deref b))))))
    table))


(define dna
  (let* ([in (mk-fasta 100000)]
         ;; Skip to ">THREE ..."
         [rst 
          (head (tail 
           (regexp-match 
             (regexp ">THREE Homo sapiens frequency\n(.*)$") 
             in)))])
    (let ([s (open-output-string)])
      ;; Copy everything but newlines to s:
      (for ([l (in-lines rst)])
        (write-string l s))
      ;; Extract the string from s:
      (string-upcase (get-output-string s)))))

(check-type dna : String)

;; 1-nucleotide counts:
(define counts1 (all-counts 1 dna))

(check-type counts1 : (Hash String (Ref Int)))

(check-type (hash-count counts1) : Int -> 4)

;; 2-nucleotide counts:
(define counts2 (all-counts 2 dna))

(check-type counts2 : (Hash String (Ref Int)))

(check-type (hash-count counts2) : Int -> 16)

;; 2-nucleotide counts:
(define counts3 (all-counts 3 dna))

(check-type counts3 : (Hash String (Ref Int)))

(check-type (hash-count counts3) : Int -> 64)

;; Specific sequences:
(check-type
 (for/list ([seq (in-list ["GGT", "GGTA", "GGTATT",
                           "GGTATTTTAATT", "GGTATTTTAATTTATAGT"])])
      (let ([table (all-counts (string-length seq) dna)])
        (if (hash-has-key? table seq)
            (deref (hash-ref table seq))
            0)))
  : (List Int) 
  -> (list 5893 1784 186 4 4))
