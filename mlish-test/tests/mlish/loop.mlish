#lang mlish
(require rackunit/turnstile)

;; datatype with no self-reference
(define-type (Test X)
  (A X) 
  (B X X))

(typecheck-fail
    (define-type (Test2 X)
      (AA (Test2 X X)))
  #:verb-msg "Improper usage of type constructor Test2: (Test2 X X), expected = 1 arguments")

(typecheck-fail
    (define-type (Test3 X)
      (AA (→)))
  #:with-msg "Improper usage of type constructor →")

(typecheck-fail
    (define-type (Test4 X)
      (AA (+ 1 2)))
  #:with-msg "\\(\\+ 1 2\\) is not a valid type")

(check-type (A 1) : (Test Int))
(check-type (B 1 2) : (Test Int))

(check-type
    (match (A 1) with
     [A x -> x]
     [B x y -> (+ x y)]) : Int -> 1)

(check-type
    (match (B 1 2) with
     [A x -> x]
     [B x y -> (+ x y)]) : Int -> 3)

;; datatype with self-reference
(define-type (Rec X)
  N
  (C X (Rec X)))

; check inferred and explicit instantiation versions
(check-type N : (Rec Int) -> N)
(check-type (N {Int}) : (Rec Int) -> (N {Int}))
(check-type (C 1 N) : (Rec Int) -> (C 1 N))

(check-type
    (match (N {Int}) with
     [N -> 0]
     [C x xs -> x]) : Int -> 0)

(check-type
    (match (C 1 N) with
     [N -> 0]
     [C x xs -> x]) : Int -> 1)

;; mutually referential datatypes
(define-types
  [(Loop1 X)
   (L1 (Loop2 X))]
  [(Loop2 X)
   (L2 (Loop1 X))])

(define (looping-f [x : (Loop1 Y)] -> (Loop1 Y)) x)

(define-types
  [(ListA X)
   NA
   (CA X (ListB X))]
  [(ListB X)
   NB
   (CB X (ListA X))])

(typecheck-fail
    (define-type (ListC X)
      NC
      (CC X (ListA X X)))
  #:with-msg 
  "Improper usage of type constructor ListA: \\(ListA X X\\), expected = 1 arguments")

(typecheck-fail (CA 1 NA))
(check-type (CA 1 NB) : (ListA Int))
(check-type (CA 1 (CB 2 NA)) : (ListA Int))
(typecheck-fail (CA 1 (CB 2 NB)))
(typecheck-fail (CB 1 NB))
(check-type (CB 1 NA) : (ListB Int))
(check-type (CB 1 (CA 2 NB)) : (ListB Int))
(typecheck-fail (CB 1 (CA 2 NA)))

(check-type
    (match (CA 1 NB) with
     [NA -> 0]
     [CA x xs -> x]) : Int -> 1)

(check-type
    (match (CA 1 (CB 2 NA)) with
     [NA -> 0]
     [CA x xs ->
      (match xs with
       [NB -> 3]
       [CB x xs -> x])]) : Int -> 2)

;; "real world" mutually referential datatypes
(define-type (BankersDeque A)
  [BD Int (List A) Int (List A)])

(define-types
  [(ImplicitCatDeque A)
   [Shallow (BankersDeque A)]
   [Deep (BankersDeque A)
         (ImplicitCatDeque (BankersDeque (CmpdElem (BankersDeque A))))
         (BankersDeque A)
         (ImplicitCatDeque (BankersDeque (CmpdElem (BankersDeque A))))
         (BankersDeque A)]]
  [(CmpdElem A)
   [Simple (BankersDeque A)]
   [Cmpd (BankersDeque A)
         (ImplicitCatDeque
           (BankersDeque (CmpdElem (BankersDeque A)))) (BankersDeque A)]])

(define (id (icd : (ImplicitCatDeque Int)) → (ImplicitCatDeque Int))
  icd)

