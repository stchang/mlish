#lang mlish
(require rackunit/turnstile)

(define-type-alias Matrix (Vector (Vector Int)))

(define size 30)

(define (vector-map [f : (→ X Y)] [v : (Vector X)] -> (Vector Y))
  (for/vector ([x (in-vector v)]) (f x)))

(define (mkmatrix [rows : Int] [cols : Int] -> Matrix)
  (for/vector ([i (in-range rows)]
               [count (in-range 1 (* rows cols) cols)])
    (for/vector ([j (in-range cols)]
                 [x (in-naturals count)])
      x)))

(check-type (mkmatrix 3 4) : Matrix
 -> (vector (vector 1 2 3 4)
            (vector 5 6 7 8)
            (vector 9 10 11 12)))

(check-type (mkmatrix 3 3) 
  : Matrix
  -> (vector (vector 1 2 3)
             (vector 4 5 6)
             (vector 7 8 9)))   

(check-type (mkmatrix 4 3) 
  : Matrix
  -> (vector (vector 1 2 3)
             (vector 4 5 6)
             (vector 7 8 9)
             (vector 10 11 12)))

(define (num-cols [mx : Matrix] -> Int)
  (let ((row (vector-ref mx 0)))
    (vector-length row)))

(define (num-rows [mx : Matrix] -> Int)
  (vector-length mx))

(define (vec-mult [v1 : (Vector Int)] [v2 : (Vector Int)] -> Int)
  (for/sum ([x (in-vector v1)]
            [y (in-vector v2)])
    (* x y)))

(define (mmult [m1 : Matrix] [m2 : Matrix] -> Matrix)
  (for/vector ([row (in-vector m1)])
    (for/vector ([col-num (in-range (num-cols m2))])
      (let ([col 
             (vector-map 
               (λ ([r : (Vector Int)]) (vector-ref r col-num))
               m2)])
      (vec-mult row col)))))

(check-type (mmult (mkmatrix 3 3) (mkmatrix 3 3))
  : Matrix
  -> (vector (vector 30 36 42)
             (vector 66 81 96)
             (vector 102 126 150)))

(check-type (mmult (mkmatrix 2 3) (mkmatrix 3 2))
  : Matrix
  -> (vector (vector 22 28)
             (vector 49 64)))

(check-type (mmult (mkmatrix 4 3) (mkmatrix 3 4))
  : Matrix
  -> (vector (vector 38 44 50 56)
             (vector 83 98 113 128)
             (vector 128 152 176 200)
             (vector 173 206 239 272)))
