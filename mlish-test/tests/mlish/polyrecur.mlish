#lang mlish
(require rackunit/turnstile)

;; tests of polymorphic recursion

;; polymorphic recursion of functions
(define (polyf [lst : (List X)] -> (List X))
  (let ([x (polyf (list 1 2 3))]
        [y (polyf (list #t #f))])
    (polyf lst)))

;; polymorphic recursive type
;; from okasaki, ch10
(define-type (Seq X)
  Nil
  (Cons X (Seq (× X X))))

(define (size [s : (Seq X)] -> Int)
  (match s with
   [Nil -> 0]
   [Cons x ps -> (add1 (* 2 (size ps)))]))
       
(check-type (size (Nil {Int})) : Int -> 0)
(check-type (size (Cons 1 Nil)) : Int -> 1)
(check-type (size (Cons 1 (Cons (tup 2 3) Nil))) : Int -> 3)
(check-type 
  (size (Cons 1 (Cons (tup 2 3) (Cons (tup (tup 4 5) (tup 6 7)) Nil)))) 
  : Int -> 7)

;; implicit queue
(define-type (Digit X)
  (Zero)
  (One X)
  (Two X X))

(define-type (ImplicitQueue X)
  [Shallow (d : (Digit X))]
  [Deep (f : (Digit X))
        (m : (ImplicitQueue (× X X)))
        (r : (Digit X))])

(define (empty -> (ImplicitQueue X))
  (Shallow (Zero)))

(define (iq-isEmpty [iq : (ImplicitQueue A)] → Bool)
  (match iq with
   [Shallow d ->
    (match d with
     [Zero -> #t]
     [One x -> #f]
     [Two x y -> #f])]
   [Deep a b c -> #f]))

(define (iq-snoc [iq : (ImplicitQueue A)] [y : A] → (ImplicitQueue A))
  (match iq with
   [Shallow d ->
    (match d with
     [Zero -> (Shallow (One y))]
     [One x -> (Deep (Two x y) (empty) Zero)]
     [Two x y -> (empty)])] ;; Error
   [Deep f m d ->
    (match d with
     [Zero -> (Deep f m (One y))]
     [One x -> (Deep f (iq-snoc m (tup x y)) Zero)]
     [Two x y -> (empty)])])) ; Error
  
(check-type (iq-isEmpty (Shallow (Zero {Int}))) : Bool -> #t)

(check-type (iq-isEmpty (iq-snoc (Shallow (Zero {Int})) 5)) : Bool -> #f)

;; example from:
;;  blogs.janestreet.com/ensuring-that-a-function-is-polymorphic-in-ocaml-3-12

(define-type (PerfectTree X)
  (Leaf X)
  (Node X (PerfectTree (× X X))))
(define (flatten [t : (PerfectTree X)] -> (List X))
  (match t with
   [Leaf x -> (list x)]
   [Node x rst ->
    (cons x
     (for/fold ([acc nil]) ([p (in-list (flatten rst))])
       (match p with
        [x y -> (cons x (cons y acc))])))]))

(check-type (flatten (Leaf 1)) : (List Int) -> (list 1))
(check-type (flatten (Node 1 (Leaf (tup 2 3)))) : (List Int) -> (list 1 2 3))
(check-type
  (flatten (Node 1 (Node (tup 2 3) (Leaf (tup (tup 4 5) (tup 6 7))))))
  : (List Int) -> (list 1 6 7 4 5 2 3))


;; catch type constructor arity error; should not loop
(define-type (BankersDeque A)
  [BD Int (List A) Int (List A)])

(typecheck-fail
    (define-type (ImplicitCatDeque A)
      [Shall (BankersDeque A)]
      [Dp (BankersDeque A)
        (ImplicitCatDeque (BankersDeque A) (CmpdElem (BankersDeque A)))
        (BankersDeque A)
        (ImplicitCatDeque (BankersDeque A) (CmpdElem (BankersDeque A)))
        (BankersDeque A)])
  #:verb-msg "Improper usage of type constructor ImplicitCatDeque: (ImplicitCatDeque (BankersDeque A) (CmpdElem (BankersDeque A))), expected = 1 arguments")

#;(define-type (CmpdElem A)
  [Simple (BankersDeque A)]
  [Cmpd (BankersDeque A) 
        (ImplicitCatDeque (BankersDeque (CmpdElem (BankersDeque A)))) 
        (BankersDeque A)])


#;(typecheck-fail
  (λ ([icd : (ImplicitCatDeque A)]) icd)
  #:with-msg 
  "type constructor ImplicitCatDeque expects 1 args, given 2")
