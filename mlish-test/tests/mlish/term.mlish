#lang mlish
(require rackunit/turnstile)

;; from chap 6 of RW OCaml

;; checks:
;; - nested recursive types (see expr)
;; - labeled adts
;; - records
;; - ho polymorphic fn argument

(define-type BasicColor
  Black
  Red
  Green
  Yellow
  Blue
  Magenta
  Cyan
  White)

(check-type Cyan : BasicColor)

(check-type (list Blue Magenta Red) : (List BasicColor))

(define (basic-color->int [c : BasicColor] -> Int)
  (match c with
   [Black -> 0] [Red     -> 1] [Green -> 2] [Yellow -> 3]
   [Blue  -> 4] [Magenta -> 5] [Cyan  -> 6] [White  -> 7]))

(define (map [f : (→ X Y)] [lst : (List X)] -> (List Y))
  (if (isnil lst)
      nil
      (cons (f (head lst)) (map f (tail lst)))))

(check-type (map basic-color->int (list Blue Red))
  : (List Int) -> (list 4 1))

(define (color-by-number [n : Int] [txt : String] -> String)
  (format "\e[38;5;~am~a\e[0m" n txt))

(define blue
  (color-by-number (basic-color->int Blue) "Blue"))

(check-type blue : String -> "\e[38;5;4mBlue\e[0m")

(printf "Hello ~a World!\n" blue)

(define-type Weight Regular Bold)
(define-type Color
  (Basic BasicColor Weight)
  (RGB Int Int Int)
  (Gray Int))

(check-type (list (RGB 250 70 70) (Basic Green Regular))
  : (List Color))

(define (color->int [c : Color] -> Int)
  (match c with
   [Basic bc w ->
    (let ([base (match w with [Bold -> 8] [Regular -> 0])])
      (+ base (basic-color->int bc)))]
   [RGB r g b ->
    (+ 16 (+ b (+ (* g 6) (* r 36))))]
   [Gray i -> (+ 232 i)]))

(define (color-print [c : Color] [s : String] -> Unit)
  (printf "~a\n" (color-by-number (color->int c) s)))

(color-print (Basic Red Bold) "A bold red!")
(color-print (Gray 4) "A muted gray...")

;; refactoring Color and Weight
(define-type NewColor
  (NewBasic BasicColor)
  (NewBold BasicColor)
  (NewRGB Int Int Int)
  (NewGray Int))

(typecheck-fail
  (match (NewGray 1) with
   [Basic bc w ->
    (let ([base (match w with [Bold -> 8] [Regular -> 0])])
      (+ base (basic-color->int bc)))]
   [RGB r g b ->
    (+ 16 (+ b (+ (* g 6) (* r 36))))]
   [Gray i -> (+ 232 i)])
  #:with-msg 
  "clauses not exhaustive; missing: NewGray, NewRGB, NewBold, NewBasic")

(typecheck-fail
  (match (NewGray 1) with
   [NewBasic bc w ->
    (let ([base (match w with [Bold -> 8] [Regular -> 0])])
      (+ base (basic-color->int bc)))]
   [NewRGB r g b ->
    (+ 16 (+ b (+ (* g 6) (* r 36))))]
   [NewGray i -> (+ 232 i)])
  #:with-msg "clauses not exhaustive; missing: NewBold")

(typecheck-fail
  (match (NewGray 1) with
   [NewBasic bc w ->
    (let ([base (match w with [Bold -> 8] [Regular -> 0])])
      (+ base (basic-color->int bc)))]
   [NewBold bc -> 1]
   [NewRGB r g b ->
    (+ 16 (+ b (+ (* g 6) (* r 36))))]
   [NewGray i -> (+ 232 i)])) ; todo: better err msg for arity

(check-type
  (match (NewGray 1) with
   [NewBasic bc -> (basic-color->int bc)]
   [NewBold bc -> (+ 8 (basic-color->int bc))]
   [NewRGB r g b ->
    (+ 16 (+ b (+ (* g 6) (* r 36))))]
   [NewGray i -> (+ 232 i)]) : Int)

;; 2016-03-09: match currently does not support else
(define-type Details
  (Logon     [user : String] [credentials : String])
  (Heartbeat [status : String])
  (LogEntry  [important? : Bool] [msg : String]))

(define-type-alias SessionID String)
(define-type-alias Time String)
(define-type-alias Common (× SessionID Time))

(define-type-alias Msg (× Common Details))

(define (foldl [f : (→ X Y Y)] [init : Y] [lst : (List X)] -> Y)
  (if (isnil lst)
      init
      (foldl f (f (head lst) init) (tail lst))))

(define (msgs-for-user [user : String] [msgs : (List Msg)] -> (List Msg))
  (match 
   (foldl
     (λ ([m : Msg] [res : (× (List Msg) (List SessionID))])
       (match res with
        [ms_out, ids_out ->
         (match m with
          [common, details ->
           (match common with
            [id, t ->
             (match details with
              [Logon u c -> (if (string=? u user) 
                                (tup (cons m ms_out) (cons id ids_out))
                                res)]
              [Heartbeat st -> (if (member id ids_out)
                                   (tup (cons m ms_out) ids_out)
                                   res)]
              [LogEntry i? lmgs -> (if (member id ids_out)
                                       (tup (cons m ms_out) ids_out)
                                       res)])])])]))
     (tup nil nil)
     msgs) with
   [msgs, ids -> (reverse msgs)]))

;; this is incomplete (and wrong, eg logentry has wrong arity) code in the book
(define (handle-msg [state : Int] [msg : Msg] -> String)
  (match msg with
   [common, details ->
    (match details with
     [LogEntry i? lmsg -> lmsg]
     [Logon u c -> u]
     [Heartbeat s -> s])]))
                   
;; expr example
(define-type (Expr X)
  (Base X)
  (Const Bool)
  (And (List (Expr X)))
  (Or (List (Expr X)))
  (Not (Expr X)))

(define-type MailField To From CC Date Subject)

(define-type-alias MailPred (×× [field : MailField]
                                [contains? : String]))

(define (test [f : MailField] [c? : String] -> (Expr MailPred))
  (Base (rec [field = f] [contains? = c?])))

(check-type (rec [field = To] [contains = "doligez"])
  : (×× [field : MailField] [contains : String]))

(check-type (get (rec [field = To] [contains = "doligez"]) field)
  : MailField -> To)

(check-type
  (And (list (Or (list (Base (rec [field = To] [contains? = "doligez"]))
                       (Base (rec [field = CC] [contains? = "doligez"]))))
             (Base (rec [field = Subject] [contains? = "runtime"]))))
  : (Expr MailPred))
  
(define (andmap [f : (→ X Bool)] [lst : (List X)] -> Bool)
  (if (isnil lst)
      #t
      (and (f (head lst)) (andmap f (tail lst)))))
(define (ormap [f : (→ X Bool)] [lst : (List X)] -> Bool)
  (if (isnil lst)
      #f
      (or (f (head lst)) (ormap f (tail lst)))))

(define (filter [p? : (→ X Bool)] [lst : (List X)] -> (List X))
  (if (isnil lst)
      nil
      (if (p? (head lst))
          (cons (head lst) (filter p? (tail lst)))
          (filter p? (tail lst)))))

(define (eval [e : (Expr X)] [eval-base : (→ X Bool)] -> Bool)
  (let ([eval2 (λ ([e : (Expr X)]) (eval e eval-base))])
    (match e with
     [Base base -> (eval-base base)]
     [Const b -> b]
     [And es -> (andmap eval2 es)]
     [Or es -> (ormap eval2 es)]
     [Not e -> (not (eval2 e))])))

(define (andfn [lst : (List (Expr X))] -> (Expr X))
  (if (member (Const #f) lst)
      (Const #f)
      (let ([lst2 
             (filter (λ ([x : (Expr X)]) (not (equal? x (Const #t)))) lst)])
        (if (isnil lst2)
            (Const #t)
            (if (isnil (tail lst2))
                (head lst2)
                (And lst2))))))

(define (orfn [lst : (List (Expr X))] -> (Expr X))
  (if (member (Const #t) lst)
      (Const #t)
      (let ([lst2 
             (filter (λ ([x : (Expr X)]) (not (equal? x (Const #f)))) lst)])
        (if (isnil lst2)
            (Const #f)
            (if (isnil (tail lst2))
                (head lst2)
                (And lst2))))))

(define (notfn [e : (Expr X)] -> (Expr X))
  (match e with
   [Base b -> (Not e)]
   [Const b -> (Const (not b))]
   [And es -> (Not e)]
   [Or es -> (Not e)]
   [Not e2 -> (Not e)]))

(define (simplify [e : (Expr X)] -> (Expr X))
  (match e with
   [Base b -> e]
   [Const x -> e]
   [And es -> (andfn (map (inst simplify X) es))]
   [Or es -> (orfn (map (inst simplify X) es))]
   [Not e -> (notfn (simplify e))]))

(check-type
    (simplify (Not (And (list (Or (list (Base "it's snowing")
                                        (Const #t)))
                              (Base "it's raining")))))
  : (Expr String)
  -> (Not (Base "it's raining")))

(check-type
    (simplify (Not (And (list (Or (list (Base "it's snowing")
                                        (Const #t)))
                              (Not (Not (Base "it's raining")))))))
  : (Expr String)
  -> (Not (Not (Not (Base "it's raining")))))

(define (notfn2 [e : (Expr X)] -> (Expr X))
  (match e with
   [Const b -> (Const (not b))]
   [Base b -> (Not e)]
   [And es -> (Not e)]
   [Or es -> (Not e)]
   [Not e -> e]))

(define (simplify2 [e : (Expr X)] -> (Expr X))
  (match e with
   [Base b -> e]
   [Const x -> e]
   [And es -> (andfn (map (inst simplify2 X) es))]
   [Or es -> (orfn (map (inst simplify2 X) es))]
   [Not e -> (notfn2 (simplify2 e))]))

(check-type
    (simplify2 (Not (And (list (Or (list (Base "it's snowing")
                                         (Const #t)))
                               (Not (Not (Base "it's raining")))))))
  : (Expr String)
  -> (Not (Base "it's raining")))
