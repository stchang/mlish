#lang mlish
(require rackunit/turnstile)

(define-type (Option X)
  None
  (Some X))

(define (make-f → (→ A A))
  (let ([r (ref (None {A}))])
    (λ (x)
      (let ([y (deref r)])
        (begin
          (:= r (Some x))
          (match y with
            [None -> x]
            [Some y -> y]))))))
;; This has to fail, because if could succeed with the type (→ A A),
;; then it could cause unsoundness.
(typecheck-fail (make-f) #:with-msg "Could not infer instantiation of polymorphic function make-f.")
; ;; If f were defined as the result of (make-f), then it would result
; ;; in unsoundess if these two expressions were also accepted:
; (f 13)
; ;; Because this would typecheck as a String even though it returns 13, an Int:
; (f "foo")

